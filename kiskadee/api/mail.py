import os
import datetime
import jwt

from threading import Thread
from time import sleep

from flask import make_response, jsonify, url_for
from flask_mail import Mail, Message

from kiskadee import config
from kiskadee.database import Database
from kiskadee.model import User
from kiskadee.api.app import kiskadee
from kiskadee.api.token import token_vefirication

kiskadee.config.update({
    'MAIL_ENABLED':
    config['mail']['MAIL_ENABLED'] == 'True',
    'MAIL_SERVER':
    config['mail']['MAIL_SERVER'],
    'MAIL_PORT':
    config['mail']['MAIL_PORT'],
    'MAIL_USERNAME':
    os.environ.get('MAIL_USERNAME'),
    'MAIL_PASSWORD':
    os.environ.get('MAIL_PASSWORD'),
    'MAIL_USE_TLS':
    config['mail']['MAIL_USE_TLS'] == 'True',
    'MAIL_USE_SSL':
    config['mail']['MAIL_USE_SSL'] == 'True',
    'EMAIL_TOKEN_SECRET_KEY':
    os.environ.get('EMAIL_TOKEN_SECRET_KEY', 'dev email token'),
    'MAIL_CONFIRM_REDIRECT':
    config['mail']['MAIL_CONFIRM_REDIRECT'],
    'MAIL_UNCONFIRMED_CLEANER_TIMER':
    config['mail']['MAIL_UNCONFIRMED_CLEANER_TIMER']
})

mail = Mail(kiskadee)


def generate_activation_token(user):
    """
    Given a user it generates an activation token and returns it
    """
    token = jwt.encode(
        {
            'user_id': user.id,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
        },
        kiskadee.config['EMAIL_TOKEN_SECRET_KEY'],
        algorithm='HS256')

    return token


def send_confirmation_email(user):
    """
    Given a user, it check MAIL_ENABLED and if it is True then sends an e-mail
    to the given user email with a tokenized link to activate the user.
    """
    if not kiskadee.config['MAIL_ENABLED']:
        user.is_active = True
        return None

    token = generate_activation_token(user)

    msg = Message(
        "Kiskadee email confirmation",
        sender=kiskadee.config['MAIL_USERNAME'],
        recipients=[user.email])

    link = url_for("confirm_email", token=token, _external=True)

    msg.body = '''
    Thank you for registering on kiskadee. Now please confirm your e-mail
    or your account will be deleted from our servers in a few hours.

    Confirmation link: {}

    Now if you are receiving this email by mistake, sorry for the
    inconvenience and please just ignore this message and the account
    refers to this message will be deleted.
    '''.format(link)

    mail.send(msg)


@kiskadee.route('/users/confirm_email/<token>', methods=['GET'])
def confirm_email(token):
    """
    Given an activation token generated by mail.send_confirmation_email
    if its token is valid it activated the token user
    or returns a validation error

    GET /users/confirm_email/<token>

    Possible status code:
        - 200 Ok -> E-mail confirmed, go back to kiskadee: <Kiskadee link>
        - 403 Forbidden -> Token expired or Invalid token
    """
    vefirication = token_vefirication(
        token, kiskadee.config['EMAIL_TOKEN_SECRET_KEY'])

    if 'error' in vefirication:
        return make_response(jsonify(vefirication), 403)

    db_session = Database().session

    user = db_session.query(User).filter_by(
        id=vefirication['data']['user_id']).first()
    user.is_active = True

    db_session.commit()

    confirm_message = '''
    E-mail confirmed, go back to kiskadee: <a href="{}">Kiskadee</a>
    '''.format(kiskadee.config['MAIL_CONFIRM_REDIRECT'])

    return make_response(confirm_message, 200)


class UnconfirmedEmailsCleaner(Thread):
    """
    If MAIL_ENABLED is True then for every MAIL_UNCONFIRMED_CLEANER_TIMER time
    it will search for unactivated users and deletes it.
    """

    def run(self):
        if not kiskadee.config['MAIL_ENABLED']:
            return None

        sleep_time = int(kiskadee.config['MAIL_UNCONFIRMED_CLEANER_TIMER'])

        while True:
            sleep(sleep_time)
            db_session = Database().session
            db_session.query(User).filter_by(is_active=False).delete()
            db_session.commit()
